import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

public class TestButton {

	class MyButton extends JButton {

		private Color hoverBackgroundColor;
		private Color pressedBackgroundColor;

		public MyButton() {
			this(null);
		}

		public MyButton(String text) {
			super(text);
			// These statements enlarge the button so that it
			// becomes a circle rather than an oval.
			Dimension size = getPreferredSize();
			size.width = size.height = Math.max(size.width, size.height);
			setPreferredSize(size);

			// This call causes the JButton not to paint
			// the background.
			// This allows us to paint a round background.
			setContentAreaFilled(false);
		}

		@Override
		protected void paintComponent(Graphics g) {
			if (getModel().isPressed()) {
				g.setColor(pressedBackgroundColor);
			} else if (getModel().isRollover()) {
				g.setColor(hoverBackgroundColor);
			} else {
				g.setColor(getBackground());
			}
			g.fillRect(0, 0, getWidth(), getHeight());
			super.paintComponent(g);
		}

		@Override
		public void setContentAreaFilled(boolean b) {
		}

		public Color getHoverBackgroundColor() {
			return hoverBackgroundColor;
		}

		public void setHoverBackgroundColor(Color hoverBackgroundColor) {
			this.hoverBackgroundColor = hoverBackgroundColor;
		}

		public Color getPressedBackgroundColor() {
			return pressedBackgroundColor;
		}

		public void setPressedBackgroundColor(Color pressedBackgroundColor) {
			this.pressedBackgroundColor = pressedBackgroundColor;
		}
	}

	protected void createAndShowGUI() {
		JFrame frame = new JFrame("Test button");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		final MyButton button = new MyButton("Don't Press me Please!");
		button.setForeground(new Color(0, 135, 200).brighter());
		button.setHorizontalTextPosition(SwingConstants.CENTER);
		button.setBorder(null);
		button.setBackground(new Color(3, 59, 90));
		button.setHoverBackgroundColor(new Color(3, 59, 90).brighter());
		button.setPressedBackgroundColor(Color.PINK);
		button.setBackground(Color.RED);
		frame.add(button);

		button.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("The Button is Pressed!!!");
			}
		});
		
		frame.setSize(500, 500);
		frame.setVisible(true);
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new TestButton().createAndShowGUI();
			}
		});

	}

}